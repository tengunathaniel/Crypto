<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function ($scope) {
	/* widget controller */
	var c = this;

	/*OK... this was done with a directive because I was lazzy to do all the events, 
	so i got a directive from github that i used before is called ngDragable and is on 
	the dependencies of this widget*/

	$scope.dropQuestionSuccess = function(index, data, event){
		/*if question is already there, lest move the question to not assigned,
		before puting a new quesiton on the array element*/
		if(c.data.questions[index]){
			c.data.not_assigned.push(c.data.questions[index]);
		}


		/*remove the question from the array if its already there to aboud duplicate it*/
		var questionIndex = c.data.questions.map(function(e){
			return (e || {}).id;
		}).indexOf(data.id);

		if(questionIndex != -1){
			c.data.questions[questionIndex] = null;
		}

		/*assign the quesiton to the question array on the correct index*/
		c.data.questions[index] = data;


		/*remove the quesition fomr the not assigned array*/
		var taskIndex = c.data.not_assigned.map(function(e){
			return e.id;
		}).indexOf(data.id);

		if(taskIndex != -1){
			c.data.not_assigned.splice(taskIndex, 1);
		}
	};

	$scope.dropNotAssignedSuccess = function(data, event){

		var taskIndex = c.data.not_assigned.map(function(e){
			return e.id;
		}).indexOf(data.id);

		/*if the question exist on the assign array do nothing*/
		if(taskIndex != -1){
			return;
		}

		/*remove the quesiton from the quesiton array and 
		push it ot tha not assigned array*/
		var questionIndex = c.data.questions.map(function(e){
			return (e || {}).id;
		}).indexOf(data.id);

		if(questionIndex != -1){
			c.data.questions[questionIndex] = null;
			c.data.not_assigned.push(data);
		}


	};

};]]></client_script>
        <controller_as>c</controller_as>
        <css>.grabbable {
    cursor: move; cursor: 
    -moz-grab; cursor: 
    -webkit-grab;
    cursor: grab; 
}
.grabbing {
   cursor: move; 
   cursor: -moz-grabbing; cursor: 
   -webkit-grabbing; cursor: grabbing;
}

.task-container, .statement-cotnainer {
  display: inline-block;
  width: 160px;
  height: 100px;
  margin: 10px;
  background-color: white;
  border: 3px gray solid;
}

.task {
  position: relative;
  width: 150px;
  height: auto;
  
}

.hovered {
  background: #f4f4f4;
  border-style: dashed;
}



#taskboard-container {
  display:grid;
  grid-template-columns: 1fr 1fr;
  height: 300px;
}

.task-col {
  display:flex;
  flex-direction: column;
}

.task-header {
  font-size: 16px;
}

.task-description {
  font-size: 10px;
}

#questions .empty {
  height: 50px;
}


#statements .empty {
  height: 50px;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs display_value="Widgets">948bab53d721120023c84f80de61034e</docs>
        <field_list/>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Drag and drop Reloaded</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	/*Added ID to help identify the elements, 
	you might will probably swap it with the record sys_id*/
	var not_assigned = [
		{"title":"Not Assigned Task 1","description":"NA description1", id:'id1'},
		{"title":"Not Assigned Task 2","description":"NA description2", id:'id2'}
	];

	var questions = [null,null];

	var statements = [
		{"title":"Statement 1","description":"Statement description1"},
		{"title":"Statement 2","description":"Statement description2"}
	];


	data.not_assigned = not_assigned;
	data.questions = questions;
	data.statements = statements;
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>andres.magnin</sys_created_by>
        <sys_created_on>2022-06-01 16:46:45</sys_created_on>
        <sys_id>0f725dce873701109536ca67dabb35d3</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>Drag and drop Reloaded</sys_name>
        <sys_package display_value="Crypto" source="x_364029_crypto">76edd585870701109536ca67dabb35a9</sys_package>
        <sys_policy/>
        <sys_scope display_value="Crypto">76edd585870701109536ca67dabb35a9</sys_scope>
        <sys_update_name>sp_widget_0f725dce873701109536ca67dabb35d3</sys_update_name>
        <sys_updated_by>andres.magnin</sys_updated_by>
        <sys_updated_on>2022-06-02 10:26:23</sys_updated_on>
        <template><![CDATA[<div id="drag-n-drop">
  
  <!--
   when ever you see this on the class is just for looks, 
   to add the grabby hand and remove it with a class in the angular way

					 ng-class="{grabbing:grab}" 
           ng-mousedown="grab = true" 
           ng-mouseup="grab = false" 
   -->
  
  <!--
    ng-drag-data should be the object that you are gonna pass
    so on Not Assigned you had ng-repeat="na in c.data.not_assigned"
    then we want to set ng-drag-data to be "na"

    for the questions i did 
    ng-repeat="question in c.data.questions track by $index" 
    so the object that we want to move arround now is called question

    NOTE: track by $index is needed if you have 2 or more elements (primitive only)
    that are exaclty the same, we have null twice when the widget is loaded
  -->
  
  <!-- tasks not assigned -->
  <div class="task-col" id="not-assigned">
    <h3 style="margin-left:10px" >Not Assigned</h3>
    <div class="task-container" 
         ng-drop="true"
         ng-drop-success="dropNotAssignedSuccess($data, $event)">
      <div class='task grabbable' 
           
           ng-class="{grabbing:na.grab, hovered:na.grab}" 
           ng-mousedown="na.grab = true" 
           ng-mouseup="na.grab = false" 

           ng-drag="true" 
           ng-drag-data="na" 
           data-allow-transform="true"
           
           ng-repeat="na in c.data.not_assigned"
           >
        <div class="task-header">
          {{na.title}}
        </div>
        <div class="task-description">
          {{na.description}}
        </div>
      </div>
    </div>
  </div>

  <!-- questions / statements container -->
  <div id="taskboard-container">
    <!-- questions -->
    <div class="task-col" id="questions">
      <h3 style="margin-left:10px">Questions</h3>

      <div 


           ng-drop="true" 
           ng-drop-success="dropQuestionSuccess($index, $data, $event)"

           ng-repeat="question in c.data.questions track by $index" 

           class="task-container"
           id="question.id">

        <div ng-if='question' class="grabbable"

             ng-class="{grabbing: question.grab, hovered:question.grab}" 
             ng-mousedown="question.grab = true" 
             ng-mouseup="question.grab = false"  

             ng-drag="true" 
             ng-drag-data="question" 
             data-allow-transform="true"
             >
          
          <div class="task-header">
            {{question.title}}
          </div>
          <div class="task-description">
            {{question.description}}
          </div>
          
        </div>

      </div>
    </div>


    <!-- statements -->
    <div class="task-col" id="statements">
      <h3 style="margin-left:10px">Statements</h3>
      <div class="statement-cotnainer" ng-repeat="statement in c.data.statements" id="{{$index}}">
        <div class="task-header">
          {{statement.title}}
        </div>
        <div class="task-description">
          {{statement.description}}
        </div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
